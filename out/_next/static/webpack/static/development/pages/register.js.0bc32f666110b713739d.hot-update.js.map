{"version":3,"file":"static/webpack/static/development/pages/register.js.0bc32f666110b713739d.hot-update.js","sources":["webpack:///./assets/utils/makeOgp.ts"],"sourcesContent":["import { preloadImage } from 'assets/utils/preloadImage'\n\ntype Options = {\n    canvas: HTMLCanvasElement\n    imageData: string\n    text: string\n    postType: 'help' | 'support'\n}\n\nconst WIDTH = 1200\nconst HEIGHT = 630\n\nconst drawBG = (context: CanvasRenderingContext2D, postType: 'help' | 'support'): CanvasRenderingContext2D => {\n    context.save()\n    const gradient = context.createLinearGradient(0, 0, WIDTH / 2, 0)\n    if (postType === 'help') {\n        gradient.addColorStop(0, '#00B4ED')\n        gradient.addColorStop(1, '#0091DB')\n    } else {\n        gradient.addColorStop(0, '#35B597')\n        gradient.addColorStop(1, '#00A968')\n    }\n    context.fillStyle = gradient\n    context.rect(0, 0, WIDTH / 2, HEIGHT)\n    context.fill()\n    context.restore()\n    return context\n}\n\nconst drawImage = async (context: CanvasRenderingContext2D, imageData: string): Promise<CanvasRenderingContext2D> => {\n    const image = await preloadImage(imageData)\n    const imageWidth = image.naturalWidth\n    const imageHeight = image.naturalHeight\n    const ratio = imageWidth / imageHeight\n    console.log(imageWidth, imageHeight)\n    context.save()\n    if (ratio > 1) {\n        context.drawImage(image, 0, 0, imageWidth, imageHeight, WIDTH / 2, 0, WIDTH, HEIGHT)\n    } else {\n        context.drawImage(image, 0, 0, imageWidth, imageHeight, WIDTH / 2, 0, WIDTH, HEIGHT)\n    }\n    context.restore()\n    return context\n}\n\nconst drawText = (context: CanvasRenderingContext2D, text: string): CanvasRenderingContext2D => {\n    const fontSize = 84\n    const lineHeight = 1.25\n    const x = 50\n    const y = 150\n    const lengthPerLine = 6\n    const maxLines = 4\n    const reg = new RegExp(`(.{${lengthPerLine}})`)\n    const trimedText =\n        text.length > lengthPerLine * maxLines ? text.slice(0, lengthPerLine * maxLines - 1).replace(/$/, '…') : text\n\n    context.save()\n    context.beginPath()\n    context.font = `bold ${fontSize}px Arial`\n    context.fillStyle = '#fff'\n    trimedText\n        .split(reg)\n        .filter(s => s)\n        .forEach((str, index) => {\n            context.fillText(str, x, y + index * 84 * lineHeight)\n        })\n    context.restore()\n    return context\n}\n\nconst drawMore = (context: CanvasRenderingContext2D): CanvasRenderingContext2D => {\n    context.save()\n    // 文字を入力する\n\n    context.restore()\n    return context\n}\n\nconst exportOgp = (canvas: HTMLCanvasElement): string => {\n    return canvas.toDataURL('image/png')\n}\n\nexport default async (options: Options) => {\n    const ctx = options.canvas.getContext('2d')\n    if (!ctx) return\n    drawBG(ctx, options.postType)\n    await drawImage(ctx, options.imageData)\n    drawText(ctx, options.text)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}