{"version":3,"file":"static/webpack/static/development/pages/apply.js.71c0783f4cffd2af54a8.hot-update.js","sources":["webpack:///./components/templates/apply/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from '@emotion/styled'\nimport { useSelector } from 'react-redux'\nimport firebase from 'firebase'\nimport Main from 'components/templates/layouts/Main'\nimport ApplyResult from 'components/organisms/apply/result'\nimport Tab from 'components/organisms/tab'\nimport useLogin from 'components/hooks/useLogin'\nimport { State as rootState } from 'reducers'\nimport ApplyLogin from 'components/organisms/apply/login'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { COLLECTIONS } from 'assets/constant'\nimport { PostType, UserType } from 'types/index'\n\ntype Props = {\n    postId: string\n}\n\nconst Apply = (props: Props): JSX.Element => {\n    const { postId } = props\n    const { side } = useSelector((state: rootState) => state.rootReducer.tab)\n    const [currentPost, setCurrentPost] = React.useState<PostType | undefined>(undefined)\n    const [isConsent, setIsConsent] = React.useState<boolean | null>()\n\n    const user = useLogin()\n\n    const updatePostData = async (user: firebase.User) => {\n        try {\n            const db = firebaseApp.firestore()\n            const docRef = db.collection(COLLECTIONS.POSTS)\n            const userDocRef = db.collection(COLLECTIONS.USERS)\n            const userData = await userDocRef.doc(user.uid).get()\n            if (!userData.exists) return\n            await docRef\n                .doc(postId)\n                .update({\n                    applicants: firebase.firestore.FieldValue.arrayUnion(userData.data()),\n                })\n                .catch(e => {\n                    console.log(e)\n                })\n            const data = await docRef\n                .doc(postId)\n                .get()\n                .catch(e => console.error(e))\n            const postData = data && data.exists ? data.data() : undefined\n            setCurrentPost(postData as PostType)\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    React.useEffect(() => {\n        setIsConsent(localStorage.getItem('isConsent') === 'true')\n    }, [])\n\n    React.useEffect(() => {\n        if (!user) return\n        updatePostData(user)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [user])\n\n    const innerElement = React.useMemo(() => {\n        return user && isConsent ? (\n            <Wrapper>\n                <ApplyResult post={currentPost} />\n            </Wrapper>\n        ) : (\n            <Wrapper>\n                <ApplyLogin\n                    onConsent={() => {\n                        setIsConsent(true)\n                    }}\n                    hasUser={!!user}\n                    user={user}\n                    side={side}\n                />\n            </Wrapper>\n        )\n    }, [currentPost, isConsent, user])\n\n    return (\n        <Main>\n            {side === 'help' ? (\n                <Tab leftContent={innerElement} tabSide={'left'} />\n            ) : (\n                <Tab rightContent={innerElement} tabSide={'right'} />\n            )}\n        </Main>\n    )\n}\n\nexport default Apply\n\nconst Wrapper = styled.div`\n    margin-top: 60px;\n`\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAAA;AACA;AADA;AAEA;AAAA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAUA;AADA;AAIA;AACA;AACA;AAfA;AAAA;AAAA;AAkBA;AAAA;AACA;AAnBA;AAeA;AAIA;AACA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;;;;A","sourceRoot":""}