{"version":3,"file":"static/webpack/static/development/pages/register.js.ee13ed09a09c178f1ad3.hot-update.js","sources":["webpack:///./components/templates/register/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from '@emotion/styled'\nimport useForm from 'react-hook-form'\nimport { DateTime } from 'luxon'\nimport Link from 'next/link'\nimport { useSelector } from 'react-redux'\nimport Main from 'components/templates/layouts/Main'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { BASE_OGP_URL, COLLECTIONS, STRAGE_BACKET } from 'assets/constant'\nimport { PostType } from 'types/index'\nimport Tab from 'components/organisms/tab'\nimport Confirm from 'components/organisms/register/confirm'\nimport Result from 'components/organisms/register/result'\nimport RegisterLogin from 'components/organisms/register/login'\nimport useLogin from 'components/hooks/useLogin'\nimport { State as rootState } from 'reducers'\nimport Button from 'components/atoms/Button'\nimport ThemeButton from 'components/molecules/theme/ThemeButton'\nimport ThemeTitle from 'components/molecules/theme/ThemeTitle'\nimport useModal from 'components/hooks/useModal'\nimport ThemeHowtoModal from 'components/molecules/theme/ThemeHowtoModal'\nimport makeOgp, { exportBlob } from 'assets/utils/makeOgp'\n\n// const FUKKO_DESIGN_UID = 'UeR6nHmPLKZPyIuR1yrA9d0be9t1'\nconst FUKKO_DESIGN_UID = 'qY8sGcFGtCf6gdHSHs9i89yk46r1'\n\nconst Register = (): JSX.Element => {\n    const db = firebaseApp.firestore()\n    const storage = firebaseApp.storage(STRAGE_BACKET)\n    const storageRef = storage.ref()\n\n    const { register, handleSubmit, errors, reset } = useForm()\n    const [currentFormData, setCurrentFormData] = React.useState<Record<string, any> | null>(null)\n    const [time, setTime] = React.useState<string | null>(null)\n    const [currentImgSrc, setCurrentImgSrc] = React.useState<string | null>(null)\n    const [postUrl, setPostUrl] = React.useState('')\n    const [isConsent, setIsConsent] = React.useState<boolean | null>()\n\n    const { side } = useSelector((state: rootState) => state.rootReducer.tab)\n\n    const user = useLogin()\n    const { isShowing, toggle } = useModal()\n\n    const isFukkoDesign = React.useMemo(() => {\n        if (user) {\n            return user.uid === FUKKO_DESIGN_UID\n        }\n        return false\n    }, [user])\n    console.log('isFukkoDesign', isFukkoDesign)\n\n    const imageRequired = React.useMemo(() => {\n        return isFukkoDesign === false\n    }, [isFukkoDesign])\n\n    const onChangeFileInput = React.useCallback((event: React.FormEvent<HTMLInputElement>) => {\n        const { files } = event.target as HTMLInputElement\n        const file = files?.[0]\n        if (file) {\n            const reader = new FileReader()\n            reader.onload = (e: any) => setCurrentImgSrc(e.target.result)\n            reader.readAsDataURL(file)\n        }\n    }, [])\n\n    const onRegister = (data: Record<string, any>): void => {\n        setCurrentFormData(data)\n        const now = DateTime.local().toString()\n        setTime(now)\n    }\n\n    React.useEffect(() => {\n        setIsConsent(localStorage.getItem('isConsent') === 'true')\n    }, [])\n\n    React.useEffect(() => {\n        if (!currentFormData) return\n        const fileList: FileList = currentFormData.image\n        const file = fileList[0]\n        if (file) {\n            if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません')\n            const reader = new FileReader()\n            reader.onload = (e: any) => setCurrentImgSrc(e.target.result)\n            reader.readAsDataURL(file)\n        }\n    }, [currentFormData])\n\n    const onSubmit = React.useCallback(async () => {\n        if (!(currentFormData && time && user)) return\n        const fileList: FileList = currentFormData.image\n        const file = fileList[0]\n        if (file) {\n            if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません')\n        }\n        const now = Date.now()\n        const postType = isFukkoDesign ? 'organization' : side\n\n        const imageUrl = await (async () => {\n            if (imageRequired) {\n                const imageRef = storageRef.child(`images/${file.name.split('.')[0]}_${now}.jpg`)\n                await imageRef.put(file)\n                return await imageRef.getDownloadURL() as Promise<string>\n            }\n            return null\n        })()\n\n        const ogpImageUrl = await (async () => {\n            if (imageRequired) {\n                const ogpImageRef = storageRef.child(`images/${file.name.split('.')[0]}_${now}_ogp.jpg`)\n                if (!currentImgSrc) return\n                const ogpCanvas = await makeOgp({\n                    imageData: currentImgSrc,\n                    postType: postType,\n                    text: currentFormData.title,\n                })\n                const blob = await exportBlob(ogpCanvas)\n                if (!blob) return\n                await ogpImageRef.put(blob)\n                return await ogpImageRef.getDownloadURL()\n            }\n            return null\n        })()\n\n        const uniqDocRef = db.collection(COLLECTIONS.POSTS).doc()\n        const uniqUrl = `${BASE_OGP_URL}${uniqDocRef.id}`\n        const postData: PostType = {\n            id: uniqDocRef.id,\n            user: {\n                uid: user.uid,\n                displayName: user.displayName,\n                email: user.email,\n                photoURL: user.photoURL,\n            },\n            title: currentFormData.title,\n            description: currentFormData.description ?? '',\n            isOpen: true,\n            createDate: time,\n            updateDate: time,\n            url: uniqUrl,\n            imageUrl,\n            ogpImageUrl,\n            side: postType,\n            timestamp: Date.now(),\n            applicants: [],\n            isEnd: false,\n            isDeleted: false,\n        }\n\n        await uniqDocRef.set(postData).catch(error => {\n            console.error(error)\n        })\n        setPostUrl(uniqUrl)\n    }, [currentFormData, currentImgSrc, db, side, storageRef, time, user])\n\n    const onBack = React.useCallback(() => {\n        reset()\n        setCurrentFormData(null)\n        setTime(null)\n        setCurrentImgSrc(null)\n    }, [reset])\n\n    const innerElement = React.useMemo(() => {\n        return (\n            <Wrapper>\n                {user && isConsent ? (\n                    !postUrl ? (\n                        !(currentFormData && (imageRequired ? currentImgSrc : true) && time) ? (\n                            <form onSubmit={handleSubmit(onRegister)}>\n                                <FormBox>\n                                    <Title>{side === 'help' ? '募集を作る' : '支援者になる'}</Title>\n                                    <FormTitle>\n                                        <TitleLabel htmlFor=\"title\">題名</TitleLabel>\n                                        <InputText\n                                            type=\"text\"\n                                            id=\"title\"\n                                            name=\"title\"\n                                            placeholder=\"募集したいことを書いてください\"\n                                            ref={register({ required: true })}\n                                        />\n                                        {errors.title && <span>This field is required</span>}\n                                    </FormTitle>\n                                    <FormDescription>\n                                        <TitleLabel htmlFor=\"description\">内容</TitleLabel>\n                                        <TextArea\n                                            id=\"description\"\n                                            name=\"description\"\n                                            placeholder=\"詳細内容を書いてください\"\n                                            ref={register}\n                                        />\n                                    </FormDescription>\n                                    <FormImage>\n                                        <TitleLabel htmlFor=\"image\">写真アップロード</TitleLabel>\n                                        {currentImgSrc && (\n                                            <ImagePreview>\n                                                <Preview src={currentImgSrc} alt=\"\" />\n                                            </ImagePreview>\n                                        )}\n                                        <ImageLabelBox htmlFor=\"image\">ファイルを選択</ImageLabelBox>\n                                        <InputImage\n                                            type=\"file\"\n                                            id=\"image\"\n                                            name=\"image\"\n                                            accept=\"image/jpeg, image/png\"\n                                            ref={register({ required: imageRequired })}\n                                            onChange={onChangeFileInput}\n                                        />\n                                    </FormImage>\n                                </FormBox>\n                                <Howto onClick={toggle}>使いかた</Howto>\n                                <ThemeHowtoModal isShowing={isShowing} toggle={toggle} />\n                                <ConfirmButton width={'400px'} height={'80px'} onClick={handleSubmit(onRegister)}>\n                                    内容確認\n                                </ConfirmButton>\n                                <Link href={'/'}>\n                                    <BackButton width={'400px'} height={'80px'} styleType=\"cancel\">\n                                        戻る\n                                    </BackButton>\n                                </Link>\n                            </form>\n                        ) : (\n                            <Confirm\n                                title={currentFormData.title}\n                                description={currentFormData.description}\n                                imgUrl={currentImgSrc}\n                                updateDate={time}\n                                onSubmit={onSubmit}\n                                onBack={onBack}\n                                user={user}\n                                side={side}\n                            />\n                        )\n                    ) : (\n                        <Result url={postUrl} />\n                    )\n                ) : (\n                    <RegisterLogin\n                        title={side === 'help' ? '募集を作る' : '支援者になる'}\n                        onConsent={() => {\n                            setIsConsent(true)\n                        }}\n                        hasUser={!!user}\n                        user={user}\n                    />\n                )}\n            </Wrapper>\n        )\n    }, [\n        currentFormData,\n        currentImgSrc,\n        errors.title,\n        handleSubmit,\n        isConsent,\n        isShowing,\n        onBack,\n        onSubmit,\n        postUrl,\n        register,\n        side,\n        time,\n        toggle,\n        user,\n    ])\n\n    return (\n        <Main>\n            <Tab tabSide={side} helpContents={innerElement} supportContents={innerElement} />\n        </Main>\n    )\n}\n\nexport default Register\n\nconst Wrapper = styled.div`\n    padding-bottom: 100px;\n`\n\nconst FormBox = styled.div`\n    width: 600px;\n    min-height: 950px;\n    margin: 60px auto 0;\n    padding: 75px 40px 102px;\n    background-color: #fff;\n    border-radius: 16px;\n    box-sizing: border-box;\n    overflow: hidden;\n`\n\nconst Title = styled(ThemeTitle)`\n    margin-bottom: 45px;\n`\n\nconst FormTitle = styled.div`\n    margin-bottom: 50px;\n`\n\nconst FormDescription = styled.div`\n    margin-bottom: 50px;\n`\n\nconst FormImage = styled.div``\n\nconst TitleLabel = styled.label`\n    display: block;\n    margin-bottom: 0.5em;\n    font-size: 22px;\n`\n\nconst InputText = styled.input`\n    width: 520px;\n    height: 56px;\n    font-size: 20px;\n    background-color: #efefef;\n    text-indent: 1em;\n    font-family: 'Noto Sans JP', sans-serif;\n`\n\nconst TextArea = styled.textarea`\n    width: 520px;\n    min-height: 320px;\n    font-size: 20px;\n    background-color: #efefef;\n    padding: 17px 22px;\n    box-sizing: border-box;\n    font-family: 'Noto Sans JP', sans-serif;\n`\n\nconst ImagePreview = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-bottom: 8px;\n`\n\nconst Preview = styled.img`\n    max-width: 100%;\n`\n\nconst ImageLabelBox = styled.label`\n    display: block;\n    width: 520px;\n    height: 56px;\n    text-align: center;\n    line-height: 56px;\n    background-color: #efefef;\n    font-size: 18px;\n    color: #9fa0a0;\n`\n\nconst InputImage = styled.input`\n    display: none;\n`\n\nconst Howto = styled.p`\n    width: 4em;\n    margin: 80px auto;\n    text-decoration: underline;\n    font-size: 24px;\n`\n\nconst ConfirmButton = styled(ThemeButton)`\n    margin: 0 auto 50px;\n`\n\nconst BackButton = styled(Button)`\n    margin: 0 auto;\n`\n"],"mappings":"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","sourceRoot":""}