{"version":3,"file":"static/webpack/static/development/pages/posts/[postId].js.7d7ff86c2b936865d961.hot-update.js","sources":["webpack:///./components/templates/posts/detail.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from '@emotion/styled'\nimport Link from 'next/link'\nimport Router from 'next/router'\nimport { useDispatch } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport Main from 'components/templates/layouts/Main'\nimport { PostType } from 'types/index'\nimport Tab from 'components/organisms/tab'\nimport DetailCard from 'components/molecules/detailCard'\nimport ThemeButton from 'components/molecules/theme/ThemeButton'\nimport Button from 'components/atoms/Button'\nimport useLogin from 'components/hooks/useLogin'\nimport Applicant from 'components/organisms/post/Applicant'\nimport * as Actions from 'reducers/tab/actions'\nimport Shares from 'components/molecules/shares'\nimport { createFacebookIntent, createTwitterIntent } from 'assets/utils/share'\nimport ThemeTitle from 'components/molecules/theme/ThemeTitle'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { COLLECTIONS } from 'assets/constant'\n\ntype Props = {\n    data: PostType | null\n}\n\nconst PostDetail = (props: Props): JSX.Element => {\n    const { data } = props\n\n    const side = React.useMemo(() => data?.side, [data])\n    const user = useLogin()\n\n    const dispatch = useDispatch()\n    const actions = React.useMemo(() => {\n        return bindActionCreators(Actions, dispatch)\n    }, [dispatch])\n\n    React.useEffect(() => {\n        if (side) actions.update(side)\n    }, [actions, side])\n\n    const isMyPost = React.useMemo(() => {\n        return user?.uid === data?.user.uid\n    }, [data, user])\n\n    const db = firebaseApp.firestore()\n    const docRef = db.collection(COLLECTIONS.POSTS)\n\n    const updatePost = React.useCallback(\n        (id: string, data: Partial<PostType>) => {\n            docRef\n                .doc(id)\n                .update(data)\n                .then(() => {\n                    Router.push('/mypage')\n                })\n        },\n        [docRef],\n    )\n\n    const postElement = React.useMemo(() => {\n        if (!data || !side) return <>Loading</>\n        return (\n            <Wrapper>\n                <DetailCardWithMargin\n                    imgUrl={data.imageUrl}\n                    title={data.title}\n                    description={data.description}\n                    user={data.user}\n                    side={side}\n                    updateDate={data.updateDate}\n                />\n                <Notice data-type={side}>\n                    <NoticeTitle>\n                        応募の際の注意\n                    </NoticeTitle>\n                    <NoticeText>\n                        申し込む前に、自治体のボランティアの受け入れ状況を確認してください。詳しくは、全国社会福祉協議会の被災地支援、災害ボランティア情報のページをご覧ください。\n                        <NoticeLink href=\"https://www.saigaivc.com/archives/\" target=\"_blank\" rel=\"noopener\">受け入れ状況を確認する</NoticeLink>\n                    </NoticeText>\n                </Notice>\n                <ShareWrapper>\n                    <Title>この声をシェアする</Title>\n                    <Shares\n                        onClickTwitter={(): void => {\n                            const intent = createTwitterIntent({\n                                url: data.url,\n                                text: '',\n                                hashtags: '被災地のスケット',\n                            })\n                            window.open(intent)\n                        }}\n                        onClickFacebook={(): void => {\n                            const intent = createFacebookIntent(data.url)\n                            window.open(intent)\n                        }}\n                    />\n                </ShareWrapper>\n                {isMyPost && <Applicant users={data?.applicants} side={side} />}\n                {user?.uid === data.user?.uid ? (\n                    <>\n                        <EditButton\n                            width={'400px'}\n                            height={'80px'}\n                            onClick={() => updatePost(data.id, { isEnd: true })}\n                        >\n                            募集終了する\n                        </EditButton>\n                        <Link href={{ pathname: '/edit', query: { postId: data.id, side } }}>\n                            <EditButton width={'400px'} height={'80px'}>\n                                編集する\n                            </EditButton>\n                        </Link>\n                        <DeleteButton\n                            styleType={'organization'}\n                            width={'400px'}\n                            height={'80px'}\n                            onClick={() => updatePost(data.id, { isDeleted: true })}\n                        >\n                            この募集を削除する\n                        </DeleteButton>\n                    </>\n                ) : (\n                    <Link href={{ pathname: '/apply', query: { postId: data.id } }}>\n                        <ApplyButton width={'400px'} height={'80px'}>\n                            応募する\n                        </ApplyButton>\n                    </Link>\n                )}\n                <BackButton width={'400px'} height={'80px'} styleType=\"cancel\" onClick={(): void => Router.back()}>\n                    戻る\n                </BackButton>\n            </Wrapper>\n        )\n    }, [data, isMyPost, side, updatePost, user])\n\n    const tabElement = React.useMemo(() => {\n        if (side === 'help') {\n            return <Tab helpContents={postElement} tabSide=\"help\" onClickHelp={(): void => Router.back()} />\n        }\n        if (side === 'support') {\n            return <Tab supportContents={postElement} tabSide=\"support\" onClickSupport={(): void => Router.back()} />\n        }\n        if (side === 'organization') {\n            return (\n                <Tab\n                    organizationContents={postElement}\n                    tabSide=\"organization\"\n                    onClickOrganization={(): void => Router.back()}\n                />\n            )\n        }\n        return <></>\n    }, [postElement, side])\n\n    const shouldRedirect = user?.uid !== data?.user.uid\n    \n    React.useEffect(() => {\n        if (user) {\n            if (data?.isDeleted && shouldRedirect) {\n                Router.push('/')\n            }\n        }\n    }, [data, user])\n\n    if (data?.isDeleted) {\n        if (shouldRedirect) {\n            return <div></div>\n        }\n    }\n\n    return <Main>{tabElement}</Main>\n}\n\nexport default PostDetail\n\nconst Wrapper = styled.div`\n    margin-top: 60px;\n    padding-bottom: 100px;\n`\n\nconst DetailCardWithMargin = styled(DetailCard)`\n    margin-bottom: 80px;\n`\n\nconst EditButton = styled(ThemeButton)`\n    margin: 0 auto 48px;\n`\n\nconst ApplyButton = styled(ThemeButton)`\n    margin: 0 auto 48px;\n`\n\nconst DeleteButton = styled(Button)`\n    margin: 0 auto 48px;\n`\n\nconst BackButton = styled(Button)`\n    margin: 0 auto;\n`\n\nconst ShareWrapper = styled.div`\n    width: 600px;\n    margin: 0 auto 80px;\n    padding: 70px 45px 70px;\n    border-radius: 16px;\n    background-color: #fff;\n    box-sizing: border-box;\n`\nconst Title = styled(ThemeTitle)`\n    margin-bottom: 55px;\n`\n\nconst Notice = styled.div`\n    width: 690px;\n    border-radius: 16px;\n    overflow: hidden;\n    box-sizing: border-box;\n    margin: 0 auto 40px;\n    padding: 48px;\n    border: 4px solid;\n    border-radius: 16px;\n    background: #fff;\n\n    &[data-type='help'] {\n        border-color: #00B4ED;\n    }\n    &[data-type='support'] {\n        border-color: #00A968;\n    }\n    &[data-type='organization'] {\n        border-color: #e85625;\n    }\n`\n\nconst NoticeTitle = styled.h3`\n    margin-bottom: 40px;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    color: #999999;\n`\n\nconst NoticeText = styled.p`\n    font-size: 20px;\n    line-height: 36px;\n    color: #999999;\n`\n\nconst NoticeLink = styled.a`\n    font-size: 20px;\n\n    &::after {\n        content: '>';\n        margin-left: 16px;\n    }\n\n    [data-type='help'] & {\n        color: #00B4ED;\n    }\n    [data-type='support'] & {\n        color: #00A968;\n    }\n    [data-type='organization'] & {\n        color: #e85625;\n    }\n`"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AAIA;AAIA;AAIA;AAIA;AAIA;AAQA;AAIA;AAsBA;AAQA;AAMA;;;;A","sourceRoot":""}