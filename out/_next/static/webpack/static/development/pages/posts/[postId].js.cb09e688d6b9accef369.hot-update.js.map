{"version":3,"file":"static/webpack/static/development/pages/posts/[postId].js.cb09e688d6b9accef369.hot-update.js","sources":["webpack:///./pages/posts/[postId].tsx"],"sourcesContent":["import * as React from 'react'\nimport { connect } from 'react-redux'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { COLLECTIONS } from 'assets/constant'\nimport { PostType } from 'types/index'\nimport PostDetail from 'components/templates/posts/detail'\nimport { UPDATE } from 'reducers/tab/types'\nimport * as Actions from 'reducers/tab/actions'\n\ntype Props = {\n    data: PostType\n}\n\nclass PagePostDetail extends React.Component<Props> {\n    static async getInitialProps({\n        query,\n        req,\n        store,\n    }: {\n        query: { postId: string; side?: 'help' | 'support' }\n        req: any\n        store: any\n    }) {\n        if (req && process.env.NODE_ENV !== 'development') {\n            return { data: null }\n        } else {\n            const db = firebaseApp.firestore()\n            const docRef = db.collection(COLLECTIONS.POSTS)\n            const postData = await docRef\n                .doc(query.postId)\n                .get()\n                .catch(e => console.error(e))\n            const data = postData && postData.exists ? { ...postData.data(), id: postData.id } : null\n            store.dispatch({ type: UPDATE, payload: { side: query.side } })\n            return { data: data }\n        }\n    }\n\n    componentDidMount(): void {}\n\n    render() {\n        return <PostDetail data={this.props.data} />\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchItems: () => dispatch(actions.fetchItems()),\n    }\n}\n\nexport default connect(state => state)(PagePostDetail)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;;;;;;;;;;;;;AAyBA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AA3BA;AACA;AAOA;;;;;AACA;AAAA;AAAA;AACA;;AACA;AACA;;AACA;AAGA;AAAA;AACA;;AAJA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAtBA;AACA;AA+BA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AAAA;;;;A","sourceRoot":""}