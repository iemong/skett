{"version":3,"file":"static/webpack/static/development/pages/posts/[postId].js.79d6bdbf04f5bab802bb.hot-update.js","sources":["webpack:///./components/templates/posts/detail.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from '@emotion/styled'\nimport Link from 'next/link'\nimport Router from 'next/router'\nimport { useDispatch } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport Main from 'components/templates/layouts/Main'\nimport { PostType } from 'types/index'\nimport Tab from 'components/organisms/tab'\nimport DetailCard from 'components/molecules/detailCard'\nimport ThemeButton from 'components/molecules/theme/ThemeButton'\nimport Button from 'components/atoms/Button'\nimport useLogin from 'components/hooks/useLogin'\nimport Applicant from 'components/organisms/post/Applicant'\nimport * as Actions from 'reducers/tab/actions'\nimport Shares from 'components/molecules/shares'\nimport { createFacebookIntent, createTwitterIntent } from 'assets/utils/share'\nimport ThemeTitle from 'components/molecules/theme/ThemeTitle'\n\ntype Props = {\n    data: PostType | null\n}\n\nconst PostDetail = (props: Props): JSX.Element => {\n    const { data } = props\n\n    const side = React.useMemo(() => data?.side, [data])\n    const user = useLogin()\n\n    const dispatch = useDispatch()\n    const actions = React.useMemo(() => {\n        return bindActionCreators(Actions, dispatch)\n    }, [dispatch])\n\n    React.useEffect(() => {\n        if (side) actions.update(side)\n    }, [actions, side])\n\n    const isMyPost = React.useMemo(() => {\n        return user?.uid === data?.user.uid\n    }, [data, user])\n\n    const postElement = React.useMemo(() => {\n        if (!data || !side) return <>Loading</>\n        return (\n            <Wrapper>\n                <DetailCardWithMargin\n                    imgUrl={data.imageUrl}\n                    title={data.title}\n                    description={data.description}\n                    user={data.user}\n                    side={side}\n                    updateDate={data.updateDate}\n                />\n                <ShareWrapper>\n                    <Title>この声をシェアする</Title>\n                    <Shares\n                        onClickTwitter={(): void => {\n                            const intent = createTwitterIntent({\n                                url: data.url,\n                                text: '',\n                                hashtags: '被災地のスケット',\n                            })\n                            window.open(intent)\n                        }}\n                        onClickFacebook={(): void => {\n                            const intent = createFacebookIntent(data.url)\n                            window.open(intent)\n                        }}\n                    />\n                </ShareWrapper>\n                {isMyPost && <Applicant users={data?.applicants} side={side} />}\n                {user?.uid === data.user?.uid ? (\n                    <Link href={{ pathname: '/edit', query: { postId: data.id, side } }}>\n                        <EditButton width={'400px'} height={'80px'}>\n                            編集する\n                        </EditButton>\n                    </Link>\n                ) : (\n                    <Link href={{ pathname: '/apply', query: { postId: data.id } }}>\n                        <ApplyButton width={'400px'} height={'80px'}>\n                            応募する\n                        </ApplyButton>\n                    </Link>\n                )}\n                <BackButton width={'400px'} height={'80px'} styleType=\"cancel\" onClick={(): void => Router.back()}>\n                    戻る\n                </BackButton>\n            </Wrapper>\n        )\n    }, [data, isMyPost, side, user])\n\n    const tabElement = React.useMemo(() => {\n        return side === 'help' ? (\n            <Tab leftContent={postElement} tabSide=\"left\" onClickLeft={(): void => Router.back()} />\n        ) : (\n            <Tab rightContent={postElement} tabSide=\"right\" onClickRight={(): void => Router.back()} />\n        )\n    }, [postElement, side])\n    return <Main>{tabElement}</Main>\n}\n\nexport default PostDetail\n\nconst Wrapper = styled.div`\n    margin-top: 60px;\n    padding-bottom: 100px;\n`\n\nconst DetailCardWithMargin = styled(DetailCard)`\n    margin-bottom: 80px;\n`\n\nconst EditButton = styled(ThemeButton)`\n    margin: 0 auto 48px;\n`\n\nconst ApplyButton = styled(ThemeButton)`\n    margin: 0 auto 48px;\n`\n\nconst BackButton = styled(Button)`\n    margin: 0 auto;\n`\n\nconst ShareWrapper = styled.div`\n    width: 600px;\n    margin: 0 auto 80px;\n    padding: 70px 45px 70px;\n    border-radius: 16px;\n    background-color: #fff;\n    box-sizing: border-box;\n`\nconst Title = styled(ThemeTitle)`\n    margin-bottom: 55px;\n`\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAesourceRoot":""}