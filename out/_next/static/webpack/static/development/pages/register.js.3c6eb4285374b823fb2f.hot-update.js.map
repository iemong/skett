{"version":3,"file":"static/webpack/static/development/pages/register.js.3c6eb4285374b823fb2f.hot-update.js","sources":["webpack:///./assets/utils/drawImageProp.ts","webpack:///./assets/utils/makeOgp.ts"],"sourcesContent":["/**\n * By Ken Fyrstenberg Nilsen\n *\n * drawImageProp(context, image [, x, y, width, height [,offsetX, offsetY]])\n *\n * If image and context are only arguments rectangle will equal canvas\n */\nexport default (\n    ctx: CanvasRenderingContext2D,\n    img: HTMLImageElement,\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    offsetX: number,\n    offsetY: number,\n): void => {\n    // default offset is center\n    offsetX = typeof offsetX === 'number' ? offsetX : 0.5\n    offsetY = typeof offsetY === 'number' ? offsetY : 0.5\n\n    // keep bounds [0.0, 1.0]\n    if (offsetX < 0) offsetX = 0\n    if (offsetY < 0) offsetY = 0\n    if (offsetX > 1) offsetX = 1\n    if (offsetY > 1) offsetY = 1\n\n    const iw = img.width\n    const ih = img.height\n    const r = Math.min(w / iw, h / ih)\n    let nw = iw * r, // new prop. width\n        nh = ih * r, // new prop. height\n        cx,\n        cy,\n        cw,\n        ch,\n        ar = 1\n\n    // decide which gap to fill\n    if (nw < w) ar = w / nw\n    if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh // updated\n    nw *= ar\n    nh *= ar\n\n    // calc source rectangle\n    cw = iw / (nw / w)\n    ch = ih / (nh / h)\n\n    cx = (iw - cw) * offsetX\n    cy = (ih - ch) * offsetY\n\n    // make sure source rectangle is valid\n    if (cx < 0) cx = 0\n    if (cy < 0) cy = 0\n    if (cw > iw) cw = iw\n    if (ch > ih) ch = ih\n\n    // fill image in dest. rectangle\n    ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h)\n}\n","import { preloadImage } from 'assets/utils/preloadImage'\nimport drawImageProp from 'assets/utils/drawImageProp'\n\ntype Options = {\n    canvas?: HTMLCanvasElement\n    imageData: string\n    text: string\n    postType: 'help' | 'support'\n}\n\nconst WIDTH = 1200\nconst HEIGHT = 630\n\nconst drawBG = (context: CanvasRenderingContext2D, postType: 'help' | 'support'): CanvasRenderingContext2D => {\n    context.save()\n    const gradient = context.createLinearGradient(0, 0, WIDTH / 2, 0)\n    if (postType === 'help') {\n        gradient.addColorStop(0, '#00B4ED')\n        gradient.addColorStop(1, '#0091DB')\n    } else {\n        gradient.addColorStop(0, '#35B597')\n        gradient.addColorStop(1, '#00A968')\n    }\n    context.fillStyle = gradient\n    context.rect(0, 0, WIDTH / 2, HEIGHT)\n    context.fill()\n    context.restore()\n    return context\n}\n\nconst drawImage = async (context: CanvasRenderingContext2D, imageData: string): Promise<CanvasRenderingContext2D> => {\n    const image = await preloadImage(imageData)\n    const imageWidth = image.naturalWidth\n    const imageHeight = image.naturalHeight\n    const canvasAspect = WIDTH / HEIGHT\n    const imageAspect = imageWidth / imageHeight\n    let sx, sy, sw, sh\n    context.save()\n    if (canvasAspect >= imageAspect) {\n        const ratio = WIDTH / imageWidth\n        sx = WIDTH / 2\n        sy = (imageHeight * ratio - HEIGHT) / ratio / 2\n        sw = imageWidth / 2\n        sh = HEIGHT / ratio\n    } else {\n        const ratio = HEIGHT / imageHeight\n        sx = (imageWidth * ratio - WIDTH) / ratio / 2\n        sy = 0\n        sw = WIDTH / ratio\n        sh = imageHeight\n    }\n    // context.drawImage(image, sx, sy, sw, sh, WIDTH / 2, 0, , )\n    const offset = {\n        x: 0.5,\n        y: 0.5,\n    }\n    drawImageProp(context, image, 0, 0, WIDTH / 2, HEIGHT, offset.x, offset.y)\n\n    context.restore()\n    return context\n}\n\nconst drawText = (context: CanvasRenderingContext2D, text: string): CanvasRenderingContext2D => {\n    const fontSize = 84\n    const lineHeight = 1.25\n    const x = 50\n    const y = 150\n    const lengthPerLine = 6\n    const maxLines = 4\n    const reg = new RegExp(`(.{${lengthPerLine}})`)\n    const trimedText =\n        text.length > lengthPerLine * maxLines ? text.slice(0, lengthPerLine * maxLines - 1).replace(/$/, '…') : text\n\n    context.save()\n    context.beginPath()\n    context.font = `bold ${fontSize}px Arial`\n    context.fillStyle = '#fff'\n    trimedText\n        .split(reg)\n        .filter(s => s)\n        .forEach((str, index) => {\n            context.fillText(str, x, y + index * 84 * lineHeight)\n        })\n    context.restore()\n    return context\n}\n\nconst drawMore = async (context: CanvasRenderingContext2D): Promise<CanvasRenderingContext2D> => {\n    context.save()\n    // 文字を入力する\n    const image = await preloadImage('/img/svg/ogp_btn_more.svg')\n    context.drawImage(image, 158, 510)\n    context.restore()\n    return context\n}\n\nexport const exportOgp = (canvas: HTMLCanvasElement): string => {\n    return canvas.toDataURL('image/png')\n}\n\nexport default async (options: Options) => {\n    const canvas = options.canvas || document.createElement('canvas')\n    if (!options.canvas) {\n        canvas.width = WIDTH\n        canvas.height = HEIGHT\n    }\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    drawBG(ctx, options.postType)\n    await drawImage(ctx, options.imageData)\n    drawText(ctx, options.text)\n    await drawMore(ctx)\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;;;;;;;AAOA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AA5BA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAQA;AARA;AAAA;AACA;AADA;AAUA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}