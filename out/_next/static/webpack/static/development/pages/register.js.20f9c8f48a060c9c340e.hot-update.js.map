{"version":3,"file":"static/webpack/static/development/pages/register.js.20f9c8f48a060c9c340e.hot-update.js","sources":["webpack:///./assets/utils/makeOgp.ts"],"sourcesContent":["import { preloadImage } from 'assets/utils/preloadImage'\nimport drawImageProp from 'assets/utils/drawImageProp'\n\ntype Options = {\n    canvas?: HTMLCanvasElement\n    imageData: string\n    text: string\n    postType: 'help' | 'support'\n}\n\nconst WIDTH = 1200\nconst HEIGHT = 630\n\nconst drawBG = (context: CanvasRenderingContext2D, postType: 'help' | 'support'): CanvasRenderingContext2D => {\n    context.save()\n    const gradient = context.createLinearGradient(0, 0, WIDTH / 2, 0)\n    if (postType === 'help') {\n        gradient.addColorStop(0, '#00B4ED')\n        gradient.addColorStop(1, '#0091DB')\n    } else {\n        gradient.addColorStop(0, '#35B597')\n        gradient.addColorStop(1, '#00A968')\n    }\n    context.fillStyle = gradient\n    context.rect(0, 0, WIDTH / 2, HEIGHT)\n    context.fill()\n    context.restore()\n    return context\n}\n\nconst drawImage = async (context: CanvasRenderingContext2D, imageData: string): Promise<CanvasRenderingContext2D> => {\n    const image = await preloadImage(imageData)\n    context.save()\n    const offset = {\n        x: 0.5,\n        y: 0.5,\n    }\n    drawImageProp(context, image, WIDTH / 2, 0, WIDTH / 2, HEIGHT, offset.x, offset.y)\n\n    context.restore()\n    return context\n}\n\nconst drawText = (context: CanvasRenderingContext2D, text: string): CanvasRenderingContext2D => {\n    const fontSize = 84\n    const lineHeight = 1.25\n    const x = 50\n    const y = 150\n    const lengthPerLine = 6\n    const maxLines = 4\n    const reg = new RegExp(`(.{${lengthPerLine}})`)\n    const trimedText =\n        text.length > lengthPerLine * maxLines ? text.slice(0, lengthPerLine * maxLines - 1).replace(/$/, '…') : text\n\n    context.save()\n    context.beginPath()\n    context.font = `bold ${fontSize}px Arial`\n    context.fillStyle = '#fff'\n    trimedText\n        .split(reg)\n        .filter(s => s)\n        .forEach((str, index) => {\n            context.fillText(str, x, y + index * 84 * lineHeight)\n        })\n    context.restore()\n    return context\n}\n\nconst drawMore = async (context: CanvasRenderingContext2D): Promise<CanvasRenderingContext2D> => {\n    context.save()\n    // 文字を入力する\n    const image = await preloadImage('/img/svg/ogp_btn_more.svg')\n    context.drawImage(image, 158, 510)\n    context.restore()\n    return context\n}\n\nexport const exportOgp = (canvas: HTMLCanvasElement): string => {\n    return canvas.toDataURL('image/png')\n}\n\nexport default async (options: Options) => {\n    const canvas = options.canvas || document.createElement('canvas')\n    if (!options.canvas) {\n        canvas.width = WIDTH\n        canvas.height = HEIGHT\n    }\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    drawBG(ctx, options.postType)\n    await drawImage(ctx, options.imageData)\n    drawText(ctx, options.text)\n    await drawMore(ctx)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AATA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAQA;AARA;AAAA;AACA;AADA;AAUA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}