{"version":3,"file":"static/webpack/static/development/pages/mypage.js.bd429a1741e897395135.hot-update.js","sources":["webpack:///./assets/api/auth.ts"],"sourcesContent":["import * as firebase from 'firebase/app'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { COLLECTIONS } from 'assets/constant'\n\nexport const createUser = async (email: string, password: string): Promise<firebase.auth.UserCredential> =>\n    await firebase.auth().createUserWithEmailAndPassword(email, password)\n\nexport const signInUser = async (email: string, password: string): Promise<firebase.auth.UserCredential> =>\n    await firebase.auth().signInWithEmailAndPassword(email, password)\n\nexport const signInFacebook = async (): Promise<firebase.auth.UserCredential> => {\n    const provider = new firebase.auth.FacebookAuthProvider()\n    provider.addScope('user_link')\n    const result = await firebase.auth().signInWithPopup(provider)\n    console.log(result)\n    const token = (result?.credential as firebase.auth.OAuthCredential).accessToken\n    const db = firebaseApp.firestore()\n    await fetch(`https://graph.facebook.com/me?fields=id,name,link&access_token=${token}`).then((res) => {\n        console.log(res.json())\n    })\n    const userDocRef = db.collection(COLLECTIONS.USERS).doc(result.user?.uid)\n    const userInfo = {\n        uid: result.user?.uid,\n        displayName: result.user?.displayName,\n        email: result.user?.email,\n        photoURL: result.user?.photoURL,\n        providerId: result.additionalUserInfo?.providerId,\n    }\n    await userDocRef.set(userInfo).catch(error => {\n        console.error(error)\n    })\n    return result\n}\n\nexport const signInTwitter = async (): Promise<firebase.auth.UserCredential> => {\n    const provider = new firebase.auth.TwitterAuthProvider()\n    const result = await firebase.auth().signInWithPopup(provider)\n    const db = firebaseApp.firestore()\n    const userDocRef = db.collection(COLLECTIONS.USERS).doc(result.user?.uid)\n    const userInfo = {\n        uid: result.user?.uid,\n        displayName: result.user?.displayName,\n        email: result.user?.email,\n        photoURL: result.user?.photoURL,\n        providerId: result.additionalUserInfo?.providerId,\n        userName: result.additionalUserInfo?.username,\n    }\n    await userDocRef.set(userInfo).catch(error => {\n        console.error(error)\n    })\n    return result\n}\n\nexport const signOut = async (): Promise<void> => await firebase.auth().signOut()\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AANA;AAAA;AAQA;AACA;AACA;AAVA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAXA;AAAA;AAmBA;AACA;AACA;AArBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AALA;AAAA;AAcA;AACA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}