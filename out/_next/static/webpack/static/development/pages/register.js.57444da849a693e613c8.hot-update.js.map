{"version":3,"file":"static/webpack/static/development/pages/register.js.57444da849a693e613c8.hot-update.js","sources":["webpack:///./components/templates/register/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from '@emotion/styled'\nimport useForm from 'react-hook-form'\nimport { DateTime } from 'luxon'\nimport Main from 'components/templates/layouts/Main'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { COLLECTIONS, STRAGE_BACKET } from 'assets/constant'\nimport { PostType } from 'types/index'\nimport Tab from 'components/organisms/tab'\nimport Confirm from 'components/organisms/register/confirm'\nimport Result from 'components/organisms/register/result'\n\nconst Register = (): JSX.Element => {\n    const db = firebaseApp.firestore()\n    const storage = firebaseApp.storage(STRAGE_BACKET)\n    const storageRef = storage.ref()\n\n    const { register, handleSubmit, errors } = useForm()\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [currentFormData, setCurrentFormData] = React.useState<Record<string, any> | null>(null)\n    const [time, setTime] = React.useState<string | null>(null)\n    const [currentImgSrc, setCurrentImgSrc] = React.useState<string | null>(null)\n    const [postUrl, setPostUrl] = React.useState('')\n\n    const onRegister = (data: Record<string, any>): void => {\n        console.log('send', data)\n        setCurrentFormData(data)\n        const now = DateTime.local().toString()\n        setTime(now)\n    }\n\n    React.useEffect(() => {\n        if (!currentFormData) return\n        const fileList: FileList = currentFormData.image\n        const file = fileList[0]\n        if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません')\n        const reader = new FileReader()\n        reader.onload = (e: any) => setCurrentImgSrc(e.target.result)\n        reader.readAsDataURL(file)\n    }, [currentFormData])\n\n    const onSubmit = React.useCallback(async () => {\n        if (!(currentFormData && time)) return\n        const fileList: FileList = currentFormData.image\n        const file = fileList[0]\n        if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません')\n        const imageRef = storageRef.child(`images/${file.name.split('.')[0]}_${Date.now()}.jpg`)\n        await imageRef.put(file)\n        const imageUrl = await imageRef.getDownloadURL()\n        const postData: PostType = {\n            userId: 1,\n            title: currentFormData.title,\n            description: currentFormData.description ?? '',\n            isOpen: true,\n            createDate: time,\n            updateDate: time,\n            url: 'google.com',\n            imageUrl,\n            side: 'help',\n        }\n\n        const uniqId = db.collection(COLLECTIONS.POSTS).doc()\n        await uniqId\n            .set(postData)\n            .then(docRef => {\n                console.log('Document written with ID: ', docRef.id)\n            })\n            .catch(error => {\n                console.error(error)\n            })\n        // TODO シェアURL\n        setPostUrl('google.com')\n    }, [currentFormData, db, storageRef, time])\n\n    return (\n        <Main>\n            <Tab\n                leftContent={\n                    <Wrapper>\n                        {!postUrl ? (\n                            !(currentFormData && currentImgSrc && time) ? (\n                                <form onSubmit={handleSubmit(onRegister)}>\n                                    <FormBox>\n                                        <Title>募集を作る</Title>\n                                        <FormTitle>\n                                            <TitleLabel htmlFor=\"title\">題名</TitleLabel>\n                                            <InputText\n                                                type=\"text\"\n                                                id=\"title\"\n                                                name=\"title\"\n                                                placeholder=\"募集したいことを書いてください\"\n                                                ref={register({ required: true })}\n                                            />\n                                            {errors.title && <span>This field is required</span>}\n                                        </FormTitle>\n                                        <FormDescription>\n                                            <TitleLabel htmlFor=\"description\">内容</TitleLabel>\n                                            <TextArea\n                                                id=\"description\"\n                                                name=\"description\"\n                                                placeholder=\"詳細内容を書いてください\"\n                                                ref={register}\n                                            />\n                                        </FormDescription>\n                                        <FormImage>\n                                            <TitleLabel htmlFor=\"image\">写真アップロード</TitleLabel>\n                                            <ImageLabelBox htmlFor=\"image\">ファイルを選択</ImageLabelBox>\n                                            <InputImage\n                                                type=\"file\"\n                                                id=\"image\"\n                                                name=\"image\"\n                                                ref={register({ required: true })}\n                                            />\n                                        </FormImage>\n                                    </FormBox>\n                                    <Howto>使いかた</Howto>\n                                    <ConfirmButton type=\"submit\">送信</ConfirmButton>\n                                    <BackButton>戻る</BackButton>\n                                </form>\n                            ) : (\n                                <Confirm\n                                    title={currentFormData.title}\n                                    description={currentFormData.description}\n                                    imgUrl={currentImgSrc}\n                                    updateDate={time}\n                                    onSubmit={onSubmit}\n                                />\n                            )\n                        ) : (\n                            <Result url={postUrl} />\n                        )}\n                    </Wrapper>\n                }\n            />\n        </Main>\n    )\n}\n\nexport default Register\n\nconst Wrapper = styled.div`\n    padding-bottom: 100px;\n`\n\nconst FormBox = styled.div`\n    width: 600px;\n    height: 950px;\n    margin: 60px auto 0;\n    padding: 75px 40px 102px;\n    background-color: #fff;\n    border-radius: 16px;\n    box-sizing: border-box;\n    overflow: hidden;\n`\n\nconst Title = styled.h1`\n    position: relative;\n    margin-bottom: 45px;\n    padding-bottom: 33px;\n    font-size: 38px;\n    text-align: center;\n    color: #000;\n    &::before {\n        content: '';\n        position: absolute;\n        left: 50%;\n        bottom: 0;\n        width: 100px;\n        height: 5px;\n        background-image: linear-gradient(to left, #00b4ed, #0091db);\n        transform: translateX(-50%);\n    }\n`\n\nconst FormTitle = styled.div`\n    margin-bottom: 50px;\n`\n\nconst FormDescription = styled.div`\n    margin-bottom: 50px;\n`\n\nconst FormImage = styled.div``\n\nconst TitleLabel = styled.label`\n    display: block;\n    margin-bottom: 0.5em;\n    font-size: 22px;\n`\n\nconst InputText = styled.input`\n    width: 520px;\n    height: 56px;\n    font-size: 18px;\n    background-color: #efefef;\n    text-indent: 1em;\n`\n\nconst TextArea = styled.textarea`\n    width: 520px;\n    min-height: 320px;\n    font-size: 18px;\n    background-color: #efefef;\n    padding: 17px 22px;\n    box-sizing: border-box;\n`\n\nconst ImageLabelBox = styled.label`\n    display: block;\n    width: 520px;\n    height: 56px;\n    text-align: center;\n    line-height: 56px;\n    background-color: #efefef;\n    font-size: 18px;\n    color: #9fa0a0;\n`\n\nconst InputImage = styled.input`\n    display: none;\n`\n\nconst Howto = styled.p`\n    width: 4em;\n    margin: 80px auto;\n    text-decoration: underline;\n    font-size: 24px;\n`\n\nconst ConfirmButton = styled.button`\n    display: block;\n    margin: 0 auto 50px;\n    width: 400px;\n    height: 80px;\n    background-image: url(/img/btn_confirm_help.png);\n    color: transparent;\n`\n\nconst BackButton = styled.button`\n    display: block;\n    width: 400px;\n    height: 80px;\n    margin: 0 auto;\n    background-image: url(/img/btn_back.png);\n    color: transparent;\n`\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AApBA;AAAA;AAwBA;AACA;AAEA;AACA;AACA;AA7BA;AA6BA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArDA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4DA;AACA;AACA;AAEA;AAIA;AAWA;AAmBA;AAIA;AAIA;AAEA;AAMA;AAQA;AASA;AAWA;AAIA;AAOA;AASA;;;;A","sourceRoot":""}