{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/irie-shinnosuke/Documents/works/skett/skett/components/templates/register/index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport useForm from 'react-hook-form';\nimport { DateTime } from 'luxon';\nimport Link from 'next/link';\nimport Main from \"../layouts/Main\";\nimport firebaseApp from \"../../../assets/utils/firebaseApp\";\nimport { COLLECTIONS, STRAGE_BACKET } from \"../../../assets/constant\";\nimport Tab from \"../../organisms/tab\";\nimport Confirm from \"../../organisms/register/confirm\";\nimport Result from \"../../organisms/register/result\";\n\nconst Register = () => {\n  const db = firebaseApp.firestore();\n  const storage = firebaseApp.storage(STRAGE_BACKET);\n  const storageRef = storage.ref();\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  const [currentFormData, setCurrentFormData] = React.useState(null);\n  const [time, setTime] = React.useState(null);\n  const [currentImgSrc, setCurrentImgSrc] = React.useState(null);\n  const [postUrl, setPostUrl] = React.useState('');\n\n  const onRegister = data => {\n    console.log('send', data);\n    setCurrentFormData(data);\n    const now = DateTime.local().toString();\n    setTime(now);\n  };\n\n  React.useEffect(() => {\n    if (!currentFormData) return;\n    const fileList = currentFormData.image;\n    const file = fileList[0];\n    if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません');\n    const reader = new FileReader();\n\n    reader.onload = e => setCurrentImgSrc(e.target.result);\n\n    reader.readAsDataURL(file);\n  }, [currentFormData]);\n  const onSubmit = React.useCallback(async () => {\n    var _currentFormData$desc;\n\n    if (!(currentFormData && time)) return;\n    const fileList = currentFormData.image;\n    const file = fileList[0];\n    if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません');\n    const imageRef = storageRef.child(`images/${file.name.split('.')[0]}_${_Date$now()}.jpg`);\n    await imageRef.put(file);\n    const imageUrl = await imageRef.getDownloadURL();\n    const uniqId = db.collection(COLLECTIONS.POSTS).doc();\n    const uniqUrl = `BASE_OGP_URL${uniqId}`;\n    const postData = {\n      userId: 1,\n      title: currentFormData.title,\n      description: (_currentFormData$desc = currentFormData.description) !== null && _currentFormData$desc !== void 0 ? _currentFormData$desc : '',\n      isOpen: true,\n      createDate: time,\n      updateDate: time,\n      url: uniqUrl,\n      imageUrl,\n      side: 'help'\n    };\n    await uniqId.set(postData).catch(error => {\n      console.error(error);\n    });\n    setPostUrl(uniqUrl);\n  }, [currentFormData, db, storageRef, time]);\n  const onBack = React.useCallback(() => {\n    reset();\n    setCurrentFormData(null);\n    setTime(null);\n    setCurrentImgSrc(null);\n  }, [reset]);\n  return __jsx(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(Tab, {\n    leftContent: __jsx(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, !postUrl ? !(currentFormData && currentImgSrc && time) ? __jsx(\"form\", {\n      onSubmit: handleSubmit(onRegister),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(FormBox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, __jsx(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"\\u52DF\\u96C6\\u3092\\u4F5C\\u308B\"), __jsx(FormTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, __jsx(TitleLabel, {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"\\u984C\\u540D\"), __jsx(InputText, {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      placeholder: \"\\u52DF\\u96C6\\u3057\\u305F\\u3044\\u3053\\u3068\\u3092\\u66F8\\u3044\\u3066\\u304F\\u3060\\u3055\\u3044\",\n      ref: register({\n        required: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), errors.title && __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"This field is required\")), __jsx(FormDescription, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(TitleLabel, {\n      htmlFor: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"\\u5185\\u5BB9\"), __jsx(TextArea, {\n      id: \"description\",\n      name: \"description\",\n      placeholder: \"\\u8A73\\u7D30\\u5185\\u5BB9\\u3092\\u66F8\\u3044\\u3066\\u304F\\u3060\\u3055\\u3044\",\n      ref: register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), __jsx(FormImage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, __jsx(TitleLabel, {\n      htmlFor: \"image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"\\u5199\\u771F\\u30A2\\u30C3\\u30D7\\u30ED\\u30FC\\u30C9\"), __jsx(ImageLabelBox, {\n      htmlFor: \"image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\"), __jsx(InputImage, {\n      type: \"file\",\n      id: \"image\",\n      name: \"image\",\n      ref: register({\n        required: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), __jsx(Howto, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"\\u4F7F\\u3044\\u304B\\u305F\"), __jsx(ConfirmButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"\\u9001\\u4FE1\"), __jsx(Link, {\n      href: '/',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, __jsx(BackButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"\\u623B\\u308B\"))) : __jsx(Confirm, {\n      title: currentFormData.title,\n      description: currentFormData.description,\n      imgUrl: currentImgSrc,\n      updateDate: time,\n      onSubmit: onSubmit,\n      onBack: onBack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }) : __jsx(Result, {\n      url: postUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n};\n\nexport default Register;\nconst Wrapper = styled.div`\n    padding-bottom: 100px;\n`;\nconst FormBox = styled.div`\n    width: 600px;\n    height: 950px;\n    margin: 60px auto 0;\n    padding: 75px 40px 102px;\n    background-color: #fff;\n    border-radius: 16px;\n    box-sizing: border-box;\n    overflow: hidden;\n`;\nconst Title = styled.h1`\n    position: relative;\n    margin-bottom: 45px;\n    padding-bottom: 33px;\n    font-size: 38px;\n    text-align: center;\n    color: #000;\n    &::before {\n        content: '';\n        position: absolute;\n        left: 50%;\n        bottom: 0;\n        width: 100px;\n        height: 5px;\n        background-image: linear-gradient(to left, #00b4ed, #0091db);\n        transform: translateX(-50%);\n    }\n`;\nconst FormTitle = styled.div`\n    margin-bottom: 50px;\n`;\nconst FormDescription = styled.div`\n    margin-bottom: 50px;\n`;\nconst FormImage = styled.div``;\nconst TitleLabel = styled.label`\n    display: block;\n    margin-bottom: 0.5em;\n    font-size: 22px;\n`;\nconst InputText = styled.input`\n    width: 520px;\n    height: 56px;\n    font-size: 18px;\n    background-color: #efefef;\n    text-indent: 1em;\n`;\nconst TextArea = styled.textarea`\n    width: 520px;\n    min-height: 320px;\n    font-size: 18px;\n    background-color: #efefef;\n    padding: 17px 22px;\n    box-sizing: border-box;\n`;\nconst ImageLabelBox = styled.label`\n    display: block;\n    width: 520px;\n    height: 56px;\n    text-align: center;\n    line-height: 56px;\n    background-color: #efefef;\n    font-size: 18px;\n    color: #9fa0a0;\n`;\nconst InputImage = styled.input`\n    display: none;\n`;\nconst Howto = styled.p`\n    width: 4em;\n    margin: 80px auto;\n    text-decoration: underline;\n    font-size: 24px;\n`;\nconst ConfirmButton = styled.button`\n    display: block;\n    margin: 0 auto 50px;\n    width: 400px;\n    height: 80px;\n    background-image: url(/img/btn_confirm_help.png);\n    color: transparent;\n`;\nconst BackButton = styled.button`\n    display: block;\n    width: 400px;\n    height: 80px;\n    margin: 0 auto;\n    background-image: url(/img/btn_back.png);\n    color: transparent;\n`;","map":{"version":3,"sources":["/Users/irie-shinnosuke/Documents/works/skett/skett/components/templates/register/index.tsx"],"names":["React","styled","useForm","DateTime","Link","Main","firebaseApp","COLLECTIONS","STRAGE_BACKET","Tab","Confirm","Result","Register","db","firestore","storage","storageRef","ref","register","handleSubmit","errors","reset","currentFormData","setCurrentFormData","useState","time","setTime","currentImgSrc","setCurrentImgSrc","postUrl","setPostUrl","onRegister","data","console","log","now","local","toString","useEffect","fileList","image","file","includes","type","Error","reader","FileReader","onload","e","target","result","readAsDataURL","onSubmit","useCallback","imageRef","child","name","split","put","imageUrl","getDownloadURL","uniqId","collection","POSTS","doc","uniqUrl","postData","userId","title","description","isOpen","createDate","updateDate","url","side","set","catch","error","onBack","required","Wrapper","div","FormBox","Title","h1","FormTitle","FormDescription","FormImage","TitleLabel","label","InputText","input","TextArea","textarea","ImageLabelBox","InputImage","Howto","p","ConfirmButton","button","BackButton"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport styled from '@emotion/styled'\nimport useForm from 'react-hook-form'\nimport { DateTime } from 'luxon'\nimport Link from 'next/link'\nimport Main from 'components/templates/layouts/Main'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { COLLECTIONS, STRAGE_BACKET } from 'assets/constant'\nimport { PostType } from 'types/index'\nimport Tab from 'components/organisms/tab'\nimport Confirm from 'components/organisms/register/confirm'\nimport Result from 'components/organisms/register/result'\n\nconst Register = (): JSX.Element => {\n    const db = firebaseApp.firestore()\n    const storage = firebaseApp.storage(STRAGE_BACKET)\n    const storageRef = storage.ref()\n\n    const { register, handleSubmit, errors, reset } = useForm()\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [currentFormData, setCurrentFormData] = React.useState<Record<string, any> | null>(null)\n    const [time, setTime] = React.useState<string | null>(null)\n    const [currentImgSrc, setCurrentImgSrc] = React.useState<string | null>(null)\n    const [postUrl, setPostUrl] = React.useState('')\n\n    const onRegister = (data: Record<string, any>): void => {\n        console.log('send', data)\n        setCurrentFormData(data)\n        const now = DateTime.local().toString()\n        setTime(now)\n    }\n\n    React.useEffect(() => {\n        if (!currentFormData) return\n        const fileList: FileList = currentFormData.image\n        const file = fileList[0]\n        if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません')\n        const reader = new FileReader()\n        reader.onload = (e: any) => setCurrentImgSrc(e.target.result)\n        reader.readAsDataURL(file)\n    }, [currentFormData])\n\n    const onSubmit = React.useCallback(async () => {\n        if (!(currentFormData && time)) return\n        const fileList: FileList = currentFormData.image\n        const file = fileList[0]\n        if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません')\n        const imageRef = storageRef.child(`images/${file.name.split('.')[0]}_${Date.now()}.jpg`)\n        await imageRef.put(file)\n        const imageUrl = await imageRef.getDownloadURL()\n\n        const uniqId = db.collection(COLLECTIONS.POSTS).doc()\n        const uniqUrl = `BASE_OGP_URL${uniqId}`\n\n        const postData: PostType = {\n            userId: 1,\n            title: currentFormData.title,\n            description: currentFormData.description ?? '',\n            isOpen: true,\n            createDate: time,\n            updateDate: time,\n            url: uniqUrl,\n            imageUrl,\n            side: 'help',\n        }\n\n        await uniqId.set(postData).catch(error => {\n            console.error(error)\n        })\n        setPostUrl(uniqUrl)\n    }, [currentFormData, db, storageRef, time])\n\n    const onBack = React.useCallback(() => {\n        reset()\n        setCurrentFormData(null)\n        setTime(null)\n        setCurrentImgSrc(null)\n    }, [reset])\n\n    return (\n        <Main>\n            <Tab\n                leftContent={\n                    <Wrapper>\n                        {!postUrl ? (\n                            !(currentFormData && currentImgSrc && time) ? (\n                                <form onSubmit={handleSubmit(onRegister)}>\n                                    <FormBox>\n                                        <Title>募集を作る</Title>\n                                        <FormTitle>\n                                            <TitleLabel htmlFor=\"title\">題名</TitleLabel>\n                                            <InputText\n                                                type=\"text\"\n                                                id=\"title\"\n                                                name=\"title\"\n                                                placeholder=\"募集したいことを書いてください\"\n                                                ref={register({ required: true })}\n                                            />\n                                            {errors.title && <span>This field is required</span>}\n                                        </FormTitle>\n                                        <FormDescription>\n                                            <TitleLabel htmlFor=\"description\">内容</TitleLabel>\n                                            <TextArea\n                                                id=\"description\"\n                                                name=\"description\"\n                                                placeholder=\"詳細内容を書いてください\"\n                                                ref={register}\n                                            />\n                                        </FormDescription>\n                                        <FormImage>\n                                            <TitleLabel htmlFor=\"image\">写真アップロード</TitleLabel>\n                                            <ImageLabelBox htmlFor=\"image\">ファイルを選択</ImageLabelBox>\n                                            <InputImage\n                                                type=\"file\"\n                                                id=\"image\"\n                                                name=\"image\"\n                                                ref={register({ required: true })}\n                                            />\n                                        </FormImage>\n                                    </FormBox>\n                                    <Howto>使いかた</Howto>\n                                    <ConfirmButton type=\"submit\">送信</ConfirmButton>\n                                    <Link href={'/'}>\n                                        <BackButton>戻る</BackButton>\n                                    </Link>\n                                </form>\n                            ) : (\n                                <Confirm\n                                    title={currentFormData.title}\n                                    description={currentFormData.description}\n                                    imgUrl={currentImgSrc}\n                                    updateDate={time}\n                                    onSubmit={onSubmit}\n                                    onBack={onBack}\n                                />\n                            )\n                        ) : (\n                            <Result url={postUrl} />\n                        )}\n                    </Wrapper>\n                }\n            />\n        </Main>\n    )\n}\n\nexport default Register\n\nconst Wrapper = styled.div`\n    padding-bottom: 100px;\n`\n\nconst FormBox = styled.div`\n    width: 600px;\n    height: 950px;\n    margin: 60px auto 0;\n    padding: 75px 40px 102px;\n    background-color: #fff;\n    border-radius: 16px;\n    box-sizing: border-box;\n    overflow: hidden;\n`\n\nconst Title = styled.h1`\n    position: relative;\n    margin-bottom: 45px;\n    padding-bottom: 33px;\n    font-size: 38px;\n    text-align: center;\n    color: #000;\n    &::before {\n        content: '';\n        position: absolute;\n        left: 50%;\n        bottom: 0;\n        width: 100px;\n        height: 5px;\n        background-image: linear-gradient(to left, #00b4ed, #0091db);\n        transform: translateX(-50%);\n    }\n`\n\nconst FormTitle = styled.div`\n    margin-bottom: 50px;\n`\n\nconst FormDescription = styled.div`\n    margin-bottom: 50px;\n`\n\nconst FormImage = styled.div``\n\nconst TitleLabel = styled.label`\n    display: block;\n    margin-bottom: 0.5em;\n    font-size: 22px;\n`\n\nconst InputText = styled.input`\n    width: 520px;\n    height: 56px;\n    font-size: 18px;\n    background-color: #efefef;\n    text-indent: 1em;\n`\n\nconst TextArea = styled.textarea`\n    width: 520px;\n    min-height: 320px;\n    font-size: 18px;\n    background-color: #efefef;\n    padding: 17px 22px;\n    box-sizing: border-box;\n`\n\nconst ImageLabelBox = styled.label`\n    display: block;\n    width: 520px;\n    height: 56px;\n    text-align: center;\n    line-height: 56px;\n    background-color: #efefef;\n    font-size: 18px;\n    color: #9fa0a0;\n`\n\nconst InputImage = styled.input`\n    display: none;\n`\n\nconst Howto = styled.p`\n    width: 4em;\n    margin: 80px auto;\n    text-decoration: underline;\n    font-size: 24px;\n`\n\nconst ConfirmButton = styled.button`\n    display: block;\n    margin: 0 auto 50px;\n    width: 400px;\n    height: 80px;\n    background-image: url(/img/btn_confirm_help.png);\n    color: transparent;\n`\n\nconst BackButton = styled.button`\n    display: block;\n    width: 400px;\n    height: 80px;\n    margin: 0 auto;\n    background-image: url(/img/btn_back.png);\n    color: transparent;\n`\n"]},"metadata":{},"sourceType":"module"}