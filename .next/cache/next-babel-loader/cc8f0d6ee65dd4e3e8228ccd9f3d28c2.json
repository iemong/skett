{"ast":null,"code":"import { INITIALIZE } from \"./types\";\nexport const initialize = user => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: INITIALIZE,\n        payload: {\n          user\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/irie-shinnosuke/Documents/works/skett/skett/reducers/user/actions.ts"],"names":["INITIALIZE","initialize","user","dispatch","type","payload","e","console","error"],"mappings":"AAEA,SAASA,UAAT;AAYA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAA8E;AACpG,SAAO,MAAOC,QAAP,IAAmC;AACtC,QAAI;AACAA,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEJ,UADD;AAELK,QAAAA,OAAO,EAAE;AACLH,UAAAA;AADK;AAFJ,OAAD,CAAR;AAMH,KAPD,CAOE,OAAOI,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH;AACJ,GAXD;AAYH,CAbM","sourcesContent":["import { ThunkAction } from 'redux-thunk'\nimport { State } from 'reducers/user/index'\nimport { INITIALIZE } from 'reducers/user/types'\nimport { UserType } from 'types/index'\n\ntype Initialize = {\n    type: typeof INITIALIZE\n    payload: {\n        user: UserType\n    }\n}\n\nexport type Action = Initialize\n\nexport const initialize = (user: UserType): ThunkAction<Promise<void>, State, undefined, Initialize> => {\n    return async (dispatch): Promise<void> => {\n        try {\n            dispatch({\n                type: INITIALIZE,\n                payload: {\n                    user,\n                },\n            })\n        } catch (e) {\n            console.error(e)\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}