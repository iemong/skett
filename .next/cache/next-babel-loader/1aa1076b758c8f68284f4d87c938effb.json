{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport useForm from 'react-hook-form';\nimport { DateTime } from 'luxon';\nimport Main from \"../layouts/Main\";\nimport firebaseApp from \"../../../assets/utils/firebaseApp\";\nimport { COLLECTIONS, STRAGE_BACKET } from \"../../../assets/constant\";\nimport Tab from \"../../organisms/tab\";\nimport Confirm from \"../../organisms/register/confirm\";\nimport Result from \"../../organisms/register/result\";\n\nconst Register = () => {\n  const db = firebaseApp.firestore();\n  const storage = firebaseApp.storage(STRAGE_BACKET);\n  const storageRef = storage.ref();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  const [currentFormData, setCurrentFormData] = React.useState(null);\n  const [time, setTime] = React.useState(null);\n  const [currentImgSrc, setCurrentImgSrc] = React.useState(null);\n  const [postUrl, setPostUrl] = React.useState('');\n\n  const onRegister = data => {\n    console.log('send', data);\n    setCurrentFormData(data);\n    const now = DateTime.local().toString();\n    setTime(now);\n  };\n\n  React.useEffect(() => {\n    if (!currentFormData) return;\n    const fileList = currentFormData.image;\n    const file = fileList[0];\n    if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません');\n    const reader = new FileReader();\n\n    reader.onload = e => setCurrentImgSrc(e.target.result);\n\n    reader.readAsDataURL(file);\n  }, [currentFormData]);\n  const onSubmit = React.useCallback(async () => {\n    var _currentFormData$desc;\n\n    if (!(currentFormData && time)) return;\n    const fileList = currentFormData.image;\n    const file = fileList[0];\n    if (!['image/jpeg', 'image/png'].includes(file.type)) throw new Error('画像形式がサポートされていません');\n    const imageRef = storageRef.child(`images/${file.name.split('.')[0]}_${_Date$now()}.jpg`);\n    const snapshot = await imageRef.put(file);\n    const postData = {\n      userId: 1,\n      title: currentFormData.title,\n      description: (_currentFormData$desc = currentFormData.description) !== null && _currentFormData$desc !== void 0 ? _currentFormData$desc : '',\n      isOpen: true,\n      createDate: time,\n      updateDate: time,\n      url: 'google.com',\n      imageUrl: `${snapshot.metadata.fullPath}`,\n      side: 'help'\n    };\n    await db.collection(COLLECTIONS.POSTS).add(postData).then(docRef => {\n      console.log('Document written with ID: ', docRef.id);\n    }).catch(error => {\n      console.error(error);\n    }); // TODO シェアURL\n\n    setPostUrl('google.com');\n  }, [currentFormData, db, storageRef, time]);\n  return __jsx(Main, null, __jsx(Tab, {\n    leftContent: __jsx(Wrapper, null, !postUrl ? !(currentFormData && currentImgSrc && time) ? __jsx(\"form\", {\n      onSubmit: handleSubmit(onRegister)\n    }, __jsx(FormBox, null, __jsx(Title, null, \"\\u52DF\\u96C6\\u3092\\u4F5C\\u308B\"), __jsx(FormTitle, null, __jsx(TitleLabel, {\n      htmlFor: \"title\"\n    }, \"\\u984C\\u540D\"), __jsx(InputText, {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      placeholder: \"\\u52DF\\u96C6\\u3057\\u305F\\u3044\\u3053\\u3068\\u3092\\u66F8\\u3044\\u3066\\u304F\\u3060\\u3055\\u3044\",\n      ref: register({\n        required: true\n      })\n    }), errors.title && __jsx(\"span\", null, \"This field is required\")), __jsx(FormDescription, null, __jsx(TitleLabel, {\n      htmlFor: \"description\"\n    }, \"\\u5185\\u5BB9\"), __jsx(TextArea, {\n      id: \"description\",\n      name: \"description\",\n      placeholder: \"\\u8A73\\u7D30\\u5185\\u5BB9\\u3092\\u66F8\\u3044\\u3066\\u304F\\u3060\\u3055\\u3044\",\n      ref: register\n    })), __jsx(FormImage, null, __jsx(TitleLabel, {\n      htmlFor: \"image\"\n    }, \"\\u5199\\u771F\\u30A2\\u30C3\\u30D7\\u30ED\\u30FC\\u30C9\"), __jsx(ImageLabelBox, {\n      htmlFor: \"image\"\n    }, \"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\"), __jsx(InputImage, {\n      type: \"file\",\n      id: \"image\",\n      name: \"image\",\n      ref: register({\n        required: true\n      })\n    }))), __jsx(Howto, null, \"\\u4F7F\\u3044\\u304B\\u305F\"), __jsx(ConfirmButton, {\n      type: \"submit\"\n    }, \"\\u9001\\u4FE1\"), __jsx(BackButton, null, \"\\u623B\\u308B\")) : __jsx(Confirm, {\n      title: currentFormData.title,\n      description: currentFormData.description,\n      imgUrl: currentImgSrc,\n      updateDate: time,\n      onSubmit: onSubmit\n    }) : __jsx(Result, {\n      url: postUrl\n    }))\n  }));\n};\n\nexport default Register;\nconst Wrapper = styled.div`\n    padding-bottom: 100px;\n`;\nconst FormBox = styled.div`\n    width: 600px;\n    height: 950px;\n    margin: 60px auto 0;\n    padding: 75px 40px 102px;\n    background-color: #fff;\n    border-radius: 16px;\n    box-sizing: border-box;\n    overflow: hidden;\n`;\nconst Title = styled.h1`\n    position: relative;\n    margin-bottom: 45px;\n    padding-bottom: 33px;\n    font-size: 38px;\n    text-align: center;\n    color: #000;\n    &::before {\n        content: '';\n        position: absolute;\n        left: 50%;\n        bottom: 0;\n        width: 100px;\n        height: 5px;\n        background-image: linear-gradient(to left, #00b4ed, #0091db);\n        transform: translateX(-50%);\n    }\n`;\nconst FormTitle = styled.div`\n    margin-bottom: 50px;\n`;\nconst FormDescription = styled.div`\n    margin-bottom: 50px;\n`;\nconst FormImage = styled.div``;\nconst TitleLabel = styled.label`\n    display: block;\n    margin-bottom: 0.5em;\n    font-size: 22px;\n`;\nconst InputText = styled.input`\n    width: 520px;\n    height: 56px;\n    font-size: 18px;\n    background-color: #efefef;\n    text-indent: 1em;\n`;\nconst TextArea = styled.textarea`\n    width: 520px;\n    min-height: 320px;\n    font-size: 18px;\n    background-color: #efefef;\n    padding: 17px 22px;\n    box-sizing: border-box;\n`;\nconst ImageLabelBox = styled.label`\n    display: block;\n    width: 520px;\n    height: 56px;\n    text-align: center;\n    line-height: 56px;\n    background-color: #efefef;\n    font-size: 18px;\n    color: #9fa0a0;\n`;\nconst InputImage = styled.input`\n    display: none;\n`;\nconst Howto = styled.p`\n    width: 4em;\n    margin: 80px auto;\n    text-decoration: underline;\n    font-size: 24px;\n`;\nconst ConfirmButton = styled.button`\n    display: block;\n    margin: 0 auto 50px;\n    width: 400px;\n    height: 80px;\n    background-image: url(/img/btn_confirm_help.png);\n    color: transparent;\n`;\nconst BackButton = styled.button`\n    display: block;\n    width: 400px;\n    height: 80px;\n    margin: 0 auto;\n    background-image: url(/img/btn_back.png);\n    color: transparent;\n`;","map":null,"metadata":{},"sourceType":"module"}