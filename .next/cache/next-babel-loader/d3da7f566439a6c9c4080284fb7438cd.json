{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/irie-shinnosuke/Documents/works/skett/skett/pages/posts/[postId].tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport firebaseApp from \"../../assets/utils/firebaseApp\";\nimport { COLLECTIONS } from \"../../assets/constant\";\nimport PostDetail from \"../../components/templates/posts/detail\";\n\nvar PagePostDetail = function PagePostDetail(props) {\n  return __jsx(PostDetail, {\n    data: props.data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  });\n};\n\nPagePostDetail.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var query, req, db, docRef, postData, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query, req = _ref.req;\n\n            if (!req) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              data: null\n            });\n\n          case 5:\n            db = firebaseApp.firestore();\n            docRef = db.collection(COLLECTIONS.POSTS);\n            _context.next = 9;\n            return docRef.doc(query.postId).get()[\"catch\"](function (e) {\n              return console.error(e);\n            });\n\n          case 9:\n            postData = _context.sent;\n            data = postData && postData.exists ? _objectSpread({}, postData.data(), {\n              id: postData.id\n            }) : null;\n            return _context.abrupt(\"return\", {\n              data: data\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PagePostDetail;","map":{"version":3,"sources":["/Users/irie-shinnosuke/Documents/works/skett/skett/pages/posts/[postId].tsx"],"names":["React","firebaseApp","COLLECTIONS","PostDetail","PagePostDetail","props","data","getInitialProps","query","req","db","firestore","docRef","collection","POSTS","doc","postId","get","e","console","error","postData","exists","id"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP;AACA,SAASC,WAAT;AAEA,OAAOC,UAAP;;AAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAkB;AACrC,SAAO,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,KAAK,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CAFD;;AAIAF,cAAc,CAACG,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,YAAAA,KAD6B,QAC7BA,KAD6B,EAE7BC,GAF6B,QAE7BA,GAF6B;;AAAA,iBAOzBA,GAPyB;AAAA;AAAA;AAAA;;AAAA,6CAQlB;AAAEH,cAAAA,IAAI,EAAE;AAAR,aARkB;;AAAA;AAUnBI,YAAAA,EAVmB,GAUdT,WAAW,CAACU,SAAZ,EAVc;AAWnBC,YAAAA,MAXmB,GAWVF,EAAE,CAACG,UAAH,CAAcX,WAAW,CAACY,KAA1B,CAXU;AAAA;AAAA,mBAYFF,MAAM,CACxBG,GADkB,CACdP,KAAK,CAACQ,MADQ,EAElBC,GAFkB,YAGZ,UAAAC,CAAC;AAAA,qBAAIC,OAAO,CAACC,KAAR,CAAcF,CAAd,CAAJ;AAAA,aAHW,CAZE;;AAAA;AAYnBG,YAAAA,QAZmB;AAgBnBf,YAAAA,IAhBmB,GAgBZe,QAAQ,IAAIA,QAAQ,CAACC,MAArB,qBAAmCD,QAAQ,CAACf,IAAT,EAAnC;AAAoDiB,cAAAA,EAAE,EAAEF,QAAQ,CAACE;AAAjE,iBAAwE,IAhB5D;AAAA,6CAiBlB;AAAEjB,cAAAA,IAAI,EAAEA;AAAR,aAjBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAAA;AAAA;AAAA;AAAA;;AAqBA,eAAeF,cAAf","sourcesContent":["import * as React from 'react'\nimport firebaseApp from 'assets/utils/firebaseApp'\nimport { COLLECTIONS } from 'assets/constant'\nimport { PostType } from 'types/index'\nimport PostDetail from 'components/templates/posts/detail'\n\ntype Props = {\n    data: PostType\n}\n\nconst PagePostDetail = (props: Props) => {\n    return <PostDetail data={props.data} />\n}\n\nPagePostDetail.getInitialProps = async ({\n    query,\n    req,\n}: {\n    query: { postId: string }\n    req: any\n}): Promise<{ data: null | firebase.firestore.DocumentData | '' }> => {\n    if (req) {\n        return { data: null }\n    } else {\n        const db = firebaseApp.firestore()\n        const docRef = db.collection(COLLECTIONS.POSTS)\n        const postData = await docRef\n            .doc(query.postId)\n            .get()\n            .catch(e => console.error(e))\n        const data = postData && postData.exists ? { ...postData.data(), id: postData.id } : null\n        return { data: data }\n    }\n}\n\nexport default PagePostDetail\n"]},"metadata":{},"sourceType":"module"}